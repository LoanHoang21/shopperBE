const Noti = require("../models/NotiModel");
const User = require("../models/UserModel");
const admin = require("../config/firebase");
const mongoose = require('mongoose');
const cron = require('cron');

const getAllNotiByReceiveId = async (receiverId) => {
  try {
    let countAllNotis = await Noti.countDocuments({
      receiver_id: receiverId,
      deleted_at: null
    });
    if (countAllNotis) {
      return {
        EM: "L·∫•y danh s√°ch th√¥ng b√°o theo lo·∫°i th√¥ng b√°o th√†nh c√¥ng",
        EC: 0,
        DT: countAllNotis,
      };
    } else {
      return {
        EM: "Danh s√°ch th√¥ng b√°o theo lo·∫°i th√¥ng b√°o tr·ªëng",
        EC: 0,
        DT: countAllNotis,
      };
    }
  } catch (e) {
    console.log(e);
    return {
      EM: "Something wrongs in service...",
      EC: -2,
      DT: [],
    };
  }
};

const getAllNotiByNotiType = async (receiverId, notiTypeId) => {
  try {
    let notis = await Noti.find({
      receiver_id: receiverId,
      notitype_id: notiTypeId,
      deleted_at: null
    }).sort({ createdAt: -1 });
    if (notis) {
      return {
        EM: "L·∫•y danh s√°ch th√¥ng b√°o theo lo·∫°i th√¥ng b√°o th√†nh c√¥ng",
        EC: 0,
        DT: notis,
      };
    } else {
      return {
        EM: "Danh s√°ch th√¥ng b√°o theo lo·∫°i th√¥ng b√°o tr·ªëng",
        EC: 0,
        DT: notis,
      };
    }
  } catch (e) {
    console.log(e);
    return {
      EM: "Something wrongs in service...",
      EC: -2,
      DT: [],
    };
  }
};

const createNotiOrder = async (data) => {
  // senderId, receiverId, orderId, name, image, description, fcmToken
  try {
    console.log(">>>>>ress", data);
    const notiOrder = await Noti.create({
      sender_id: data.senderId,
      receiver_id: data.receiverId,
      order_id: data.orderId,
      name: data.name,
      image: data.image,
      description: data.description,
      notitype_id: '68046110424a1ce38058d708',
    });
    if (notiOrder) {
      // G·ª≠i push notification n·∫øu c√≥ fcmToken
      if (data.fcmToken) {
        const message = {
          token: data.fcmToken,
          // token: 'dh46avSoTVCgmdfk4SDXYu:APA91bFgq6XoC0Z6WdnFaNXa3SnIal35XWhW4XG-5HuaIEUAkor4bqJwU9f59OkaPDOMXewtbKpnZKYYJcPennloST1DEBDvvuTrVJpcDoZmI2UY32i78LM',
          notification: {
            image: data.image || "https://res.cloudinary.com/dr0ncakbs/image/upload/v1746369375/default_pyru0w.png",
            title: data.name || "Th√¥ng b√°o m·ªõi",
            body: data.description || "",
          },
          // th√¥ng tin c·∫ßn thi·∫øt ƒë·ªÉ ƒëi·ªÅu h∆∞·ªõng ƒë·∫øn m√†n h√¨nh mong mu·ªën
          data: {
            orderId: data.orderId || "",
            senderId: data.senderId || "",

          },
        };

        try {
          await admin.messaging().send(message);
          console.log("Push notification order sent successfully.");
        } catch (fcmError) {
          console.error("Error sending FCM notification:", fcmError);
        }
      }

      return {
        EM: "T·∫°o th√¥ng b√°o ƒë∆°n h√†ng th√†nh c√¥ng",
        EC: 0,
        DT: notiOrder,
      };
    } else {
      return {
        EM: "T·∫°o th√¥ng b√°o ƒë∆°n h√†ng th·∫•t b·∫°i",
        EC: 0,
        DT: notiOrder,
      };
    }
  } catch (error) {
    console.log(error);
    return {
      EM: "Something wrongs in service...",
      EC: -2,
      DT: [],
    };
  }
};

const isExpiringVoucher = (startDate, endDate) => {
  const today = new Date();
  const start = new Date(startDate);
  const end = new Date(endDate);
  const diff = (end.getTime() - today.getTime()) / (1000 * 3600 * 24);
  return diff <= 3 && diff >= 0 && start <= today;
};

const checkQuantityUserVoucher = (maxUser, userCount) => {
  if(userCount>=maxUser)  return false;
  return true;
};

const createNotiVoucher = async (data) => {
  // receiverId, name, image, description, fcmToken
  // console.log(data.receiveId.toString(), data.name, data.image, data.description, data.fcmToken);
  try {
    const notiVoucher = await Noti.create({
      receiver_id: data.receiveId,
      name: data.name,
      image: data.image,
      description: data.description,
      notitype_id: '6803d8e36fee1e8afa9eb5db',
    });
    if (notiVoucher) {
      // G·ª≠i push notification n·∫øu c√≥ fcmToken
      if (data.fcmToken) {
        const message = {
          token: data.fcmToken,
          notification: {
            title: data.name || "Th√¥ng b√°o m·ªõi",
            body: data.description || "",
          },
          data: {
            // orderId: data.orderId || "",
            receiverId: data.receiveId.toString() || "",
          },
        };

        try {
          await admin.messaging().send(message);
          console.log("Push notification voucher sent successfully.");
        } catch (fcmError) {
          console.error("Error sending FCM notification:", fcmError);
        }
      }

      return {
        EM: "T·∫°o th√¥ng b√°o voucher th√†nh c√¥ng",
        EC: 0,
        DT: notiVoucher,
      };
    } else {
      return {
        EM: "T·∫°o th√¥ng b√°o voucher th·∫•t b·∫°i",
        EC: 0,
        DT: notiVoucher,
      };
    }
  } catch (error) {
    console.log(error);
    return {
      EM: "Something wrongs in service...",
      EC: -2,
      DT: [],
    };
  }
};

let userVoucherJobs = {};

const checkAndNotifyExpiringVouchers = async (userId) => {
  try {
    // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ DB
    const user = await User.findById(userId);
    if (!user) {
      console.log("User not found!");
      return;
    }

    const res = await fetch('http://localhost:3001/api/voucher/getAll');
    const result = await res.json();

    if (result.EC === 0) {
      const vouchers = result.DT;

      const expiringVouchers = vouchers.filter(
        (voucher) =>
          isExpiringVoucher(voucher.start_date, voucher.end_date) &&
          checkQuantityUserVoucher(voucher.max_user, voucher.user_count)
      );

      if (expiringVouchers.length > 0) {
        const randomNames = [
          "Voucher s·∫Øp h·∫øt h·∫°n!",
          "N·∫†P ƒê·∫¶Y M√É GI·∫¢M GI√Å",
          "M√£ gi·∫£m gi√° s·∫Øp h·∫øt h·∫°n. Nhanh tay d√πng ngay!",
          "ƒê·ª´ng b·ªè l·ª° ∆∞u ƒë√£i n√†y!",
          "Ch·ªâ c√≤n ch√∫t th·ªùi gian s·ª≠ d·ª•ng voucher!",
        ];

        const randomDescs = [
          `‚ú®M√£ gi·∫£m 500K, 200K ƒë√£ s·∫µn s√†ng\nüß°Video tung th√™m m√£ gi·∫£m ƒë·∫øn 50%\nüöÄMu·ªën mua g√¨ v√†o ngay b·∫°n ∆°i!`,
          `üé´C√≤n voucher Xtra ƒë·∫øn 1 Tri·ªáu\nüöõC√πng ∆∞u ƒë√£i Freeship ƒë·∫øn 300K`,
          `üß°Ng·∫≠p tr√†n m√£ gi·∫£m 500K, 200K,...\nüî•Duy nh·∫•t h√¥m nay - Mua ngay!`,
        ];

        const randomName = randomNames[Math.floor(Math.random() * randomNames.length)];
        const randomDesc = randomDescs[Math.floor(Math.random() * randomDescs.length)];
        const thumbnail = expiringVouchers[0]?.image || "";

        await createNotiVoucher({
          receiveId: user._id,
          name: randomName,
          image: thumbnail,
          description: randomDesc,
          fcmToken: user.fcm_token,
        });

        console.log("T·∫°o th√¥ng b√°o voucher s·∫Øp h·∫øt h·∫°n th√†nh c√¥ng.");
      } else {
        console.log("Kh√¥ng c√≥ voucher n√†o s·∫Øp h·∫øt h·∫°n.");
      }
    }
  } catch (err) {
    console.error("L·ªói khi ki·ªÉm tra v√† t·∫°o th√¥ng b√°o voucher:", err);
  }
};

// Start the cron job for user
const startUserVoucherJob = (userId) => {
  if (userVoucherJobs[userId]) {
    console.log("Job already running for this user!");
    return;
  }

  // const job = new cron.CronJob('*/2 * * * *', () => {
  const job = new cron.CronJob('*/30 * * * * *', () => {
    checkAndNotifyExpiringVouchers(userId);
  });

  job.start();
  userVoucherJobs[userId] = job;
  console.log(`Started job for user ${userId}`);
};

// Stop the cron job for user
const stopUserVoucherJob = (userId) => {
  const job = userVoucherJobs[userId];
  if (job) {
    job.stop();
    delete userVoucherJobs[userId];
    console.log(`Stopped job for user ${userId}`);
  }
};

const updateStatusNoti = async (notiId, data) => {
  try {
    const updatedNoti= await Noti.findOneAndUpdate(
      { _id: notiId, deleted_at: null },
      {
        is_read: data.is_read,
      },
      { new: true } // tr·∫£ v·ªÅ document m·ªõi sau khi c·∫≠p nh·∫≠t
    );

    if (updatedNoti) {
      return {
        EM: "C·∫≠p nh·∫≠t tr·∫°ng th√°i th√¥ng b√°o th√†nh c√¥ng",
        EC: 0,
        DT: updatedNoti,
      };
    } else {
      return {
        EM: "Kh√¥ng t√¨m th·∫•y th√¥ng b√°o c·∫ßn c·∫≠p nh·∫≠t",
        EC: 0,
        DT: [],
      };
    }
  } catch (error) {
    console.log("Error in updateNotiType:", error);
    return {
      EM: "ƒê√£ x·∫£y ra l·ªói khi c·∫≠p nh·∫≠t th√¥ng b√°o",
      EC: -2,
      DT: [],
    };
  }
};

const getDetailsNoti = async (id) => {
  try {
    const noti = await Noti.findOne({
      _id: id,
      deleted_at: null,
    });
    if (noti) {
      return {
        EM: "L·∫•y th√¥ng tin th√¥ng b√°o th√†nh c√¥ng",
        EC: 0,
        DT: noti,
      };
    } else {
      return {
        EM: "Kh√¥ng t√¨m th·∫•y th√¥ng b√°o",
        EC: 0,
        DT: noti,
      };
    }
  } catch (e) {
    console.log(e);
    return {
      EM: "Something wrongs in service...",
      EC: -2,
      DT: [],
    };
  }
};

const getAllNotiByAdminAndNotiType = async (senderId, notiTypeId) => {
  try {
    let query = {
      notitype_id: notiTypeId,
      deleted_at: null,
      $or: [
        { sender_id: senderId },
        { sender_id: null }
      ]
    };
    let notis = await Noti.find(query).sort({ updatedAt: -1 });
    if (notis) {
      return {
        EM: "L·∫•y danh s√°ch th√¥ng b√°o theo lo·∫°i th√¥ng b√°o th√†nh c√¥ng",
        EC: 0,
        DT: notis,
      };
    } else {
      return {
        EM: "Danh s√°ch th√¥ng b√°o theo lo·∫°i th√¥ng b√°o tr·ªëng",
        EC: 0,
        DT: notis,
      };
    }
  } catch (e) {
    console.log(e);
    return {
      EM: "Something wrongs in service...",
      EC: -2,
      DT: [],
    };
  }
};

const getAllNotiBySenderIdAndNotiType = async (senderId, notiTypeId) => {
  try {
    let notis = await Noti.find({
      sender_id: senderId,
      notitype_id: notiTypeId,
      deleted_at: null
    }).sort({ updatedAt: -1 });
    if (notis) {
      return {
        EM: "L·∫•y danh s√°ch th√¥ng b√°o theo lo·∫°i th√¥ng b√°o th√†nh c√¥ng",
        EC: 0,
        DT: notis,
      };
    } else {
      return {
        EM: "Danh s√°ch th√¥ng b√°o theo lo·∫°i th√¥ng b√°o tr·ªëng",
        EC: 0,
        DT: notis,
      };
    }
  } catch (e) {
    console.log(e);
    return {
      EM: "Something wrongs in service...",
      EC: -2,
      DT: [],
    };
  }
};

const getNotiUpdateOrder = async (receiverId, notitypeId) => {
  try {
    const groupNotis = await Noti.aggregate([
      {
        $match: {
          receiver_id: new mongoose.Types.ObjectId(receiverId),
          notitype_id: new mongoose.Types.ObjectId(notitypeId),
          deleted_at: null,
        },
      },
      {
        $sort: { createdAt: -1 }
      },
      {
        $group: {
          _id: "$order_id",
          // notifications: {
          //   $push: {
          //     _id: "$_id",
          //     infor: "$infor",
          //     receiver_id: "$receiver_id",
          //     sender_id: "$sender_id",
          //     notitype_id: "$notitype_id",
          //     createdAt: "$createdAt",
          //     updatedAt: "$updatedAt",
          //   },
          // },
          notiOrder: {
            $push: "$$ROOT"
          }
        },
      },
      // {
      //   $sort: { "_id": -1 } // S·∫Øp x·∫øp nh√≥m theo order_id (n·∫øu c·∫ßn)
      // }
    ]);

    if (groupNotis && groupNotis.length > 0) {
      return {
        EM: "L·∫•y danh s√°ch th√¥ng b√°o c·∫≠p nh·∫≠t ƒë∆°n h√†ng th√†nh c√¥ng",
        EC: 0,
        DT: groupNotis,
      };
    } else {
      return {
        EM: "Kh√¥ng c√≥ th√¥ng b√°o c·∫≠p nh·∫≠t ƒë∆°n h√†ng",
        EC: 0,
        DT: [],
      };
    }
  } catch (e) {
    console.log(e);
    return {
      EM: "Something wrongs in service...",
      EC: -2,
      DT: [],
    };
  }
};

const getTwoNotiUpdateOrderLastest = async (receiverId, notitypeId) => {
  try {
    const groupNotis = await Noti.aggregate([
      {
        $match: {
          receiver_id: new mongoose.Types.ObjectId(receiverId),
          notitype_id: new mongoose.Types.ObjectId(notitypeId),
          deleted_at: null,
        },
      },
      {
        $sort: { createdAt: -1 } // S·∫Øp x·∫øp theo th·ªùi gian t·∫°o gi·∫£m d·∫ßn (m·ªõi nh·∫•t tr∆∞·ªõc)
      },
      {
        $group: {
          _id: "$order_id",
          notiOrder: {
            $push: "$$ROOT"
          }
        },
      },
      {
        $limit: 2 // L·∫•y t·ªëi ƒëa 2 nh√≥m th√¥ng b√°o
      }
    ]);

    if (groupNotis && groupNotis.length > 0) {
      return {
        EM: "L·∫•y danh s√°ch th√¥ng b√°o c·∫≠p nh·∫≠t ƒë∆°n h√†ng th√†nh c√¥ng",
        EC: 0,
        DT: groupNotis,
      };
    } else {
      return {
        EM: "Kh√¥ng c√≥ th√¥ng b√°o c·∫≠p nh·∫≠t ƒë∆°n h√†ng",
        EC: 0,
        DT: [],
      };
    }
  } catch (e) {
    console.log(e);
    return {
      EM: "Something wrongs in service...",
      EC: -2,
      DT: [],
    };
  }
};

const createNotiByAdmin = async (data) => {
  // image, name, description, receiver_id, sender_id, notitype_id
  try {
    const notiByAdmin = await Noti.create({
      image: data.image,
      name: data.name,
      description: data.description,
      receiver_id: data.receiver_id,
      sender_id: data.sender_id,
      notitype_id: data.notitype_id,
    });
    if (notiByAdmin) {
      const res = await fetch(`http://localhost:3001/api/user/getDetailUser/${data.receiver_id}`);
      const json = await res.json();
      const user = json?.DT;
      if(!user){
        return {
          EM: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng',
          EC: -1,
          DT: [],
        };
      }
      // G·ª≠i push notification n·∫øu c√≥ fcmToken
      if (user.fcm_token) {
        const message = {
          token: user.fcm_token,
          notification: {
            title: data.name || "Th√¥ng b√°o m·ªõi",
            body: data.description || "",
          },
          data: {
            // orderId: data.orderId || "",
            receiverId: data.receiver_id || "",
          },
        };

        try {
          await admin.messaging().send(message);
          console.log("Push notification create by admin sent successfully.");
        } catch (fcmError) {
          console.error("Error sending FCM notification:", fcmError);
        }
      }

      return {
        EM: "Admin t·∫°o th√¥ng b√°o th√†nh c√¥ng",
        EC: 0,
        DT: notiByAdmin,
      };
    } else {
      return {
        EM: "Admin t·∫°o th√¥ng b√°o th·∫•t b·∫°i",
        EC: 0,
        DT: notiByAdmin,
      };
    }
  } catch (error) {
    console.log(error);
    return {
      EM: "Something wrongs in service...",
      EC: -2,
      DT: [],
    };
  }
};

const updateNotiByAdmin = async (notiId, data) => {
  try {
    console.log("notiId", notiId, data);
    const updatedNoti = await Noti.findByIdAndUpdate(
      {_id: notiId},
      {
        name: data.name,
        image: data.image,
        description: data.description,
      },
      { new: true }
    );

    if (updatedNoti) {
      const res = await fetch(`http://localhost:3001/api/user/getDetailUser/${data.receiver_id}`);
      const json = await res.json();
      const user = json?.DT;
      if(!user){
        return {
          EM: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng',
          EC: -1,
          DT: [],
        };
      }
      // G·ª≠i push notification n·∫øu c√≥ fcmToken
      if (user.fcm_token) {
        const message = {
          token: user.fcm_token,
          notification: {
            title: data.name || "Th√¥ng b√°o m·ªõi",
            body: data.description || "",
            image: data.image || "",
          },
          data: {
            receiverId: data.receiver_id || "",
          },
        };

        try {
          await admin.messaging().send(message);
          console.log("Push notification (updated by admin) sent successfully.");
        } catch (fcmError) {
          console.error("Error sending FCM notification:", fcmError);
        }
      }

      return {
        EM: "Admin c·∫≠p nh·∫≠t th√¥ng b√°o th√†nh c√¥ng",
        EC: 0,
        DT: updatedNoti,
      };
    } else {
      return {
        EM: "Kh√¥ng t√¨m th·∫•y th√¥ng b√°o ƒë·ªÉ c·∫≠p nh·∫≠t",
        EC: 1,
        DT: null,
      };
    }
  } catch (error) {
    console.error(error);
    return {
      EM: "ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh c·∫≠p nh·∫≠t",
      EC: -2,
      DT: null,
    };
  }
};

// const deleteNoti = async (id) => {
//   try {
//     const updatedNoti = await Noti.findByIdAndUpdate(
//       id,
//       { deleted_at: new Date() },
//       { new: true }
//     );

//     if (updatedNoti) {
//       return {
//         EM: "ƒê√°nh d·∫•u th√¥ng b√°o l√† ƒë√£ x√≥a th√†nh c√¥ng",
//         EC: 0,
//         DT: updatedNoti,
//       };
//     } else {
//       return {
//         EM: "Kh√¥ng t·ªìn t·∫°i th√¥ng b√°o c·∫ßn ƒë√°nh d·∫•u x√≥a",
//         EC: 0,
//         DT: [],
//       };
//     }
//   } catch (e) {
//     console.log(e);
//     return {
//       EM: "Something wrongs in service...",
//       EC: -2,
//       DT: [],
//     };
//   }
// };

const deleteNotiByAdmin = async (notiId) => {
  try {
    const noti = await Noti.deleteOne({ _id: notiId });

    if (noti.deletedCount > 0) {
      return {
        EM: "X√≥a th√¥ng b√°o th√†nh c√¥ng",
        EC: 0,
        DT: noti,
      };
    } else {
      return {
        EM: "Kh√¥ng t√¨m th·∫•y th√¥ng b√°o ƒë·ªÉ x√≥a",
        EC: 1,
        DT: [],
      };
    }
  } catch (e) {
    console.log(e);
    return {
      EM: "C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh x√≥a th√¥ng b√°o",
      EC: -2,
      DT: [],
    };
  }
};

module.exports = {
  getAllNotiByReceiveId,
  getAllNotiByNotiType,
  createNotiOrder,
  updateStatusNoti,
  getDetailsNoti,
  createNotiVoucher,
  getAllNotiByAdminAndNotiType,
  getAllNotiBySenderIdAndNotiType,
  getNotiUpdateOrder,
  getTwoNotiUpdateOrderLastest,
  startUserVoucherJob,
  stopUserVoucherJob,
  createNotiByAdmin,
  updateNotiByAdmin,
  // deleteNoti,
  deleteNotiByAdmin,
};
